// Code generated by protoc-gen-go. DO NOT EDIT.
// source: char_vs_rune.proto

package char_vs_rune // import "github.com/tamarakaufler/grpc-char-vs-rune/client/char-vs-rune"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ToRuneRequest struct {
	From                 string   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToRuneRequest) Reset()         { *m = ToRuneRequest{} }
func (m *ToRuneRequest) String() string { return proto.CompactTextString(m) }
func (*ToRuneRequest) ProtoMessage()    {}
func (*ToRuneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_char_vs_rune_c1e4e828d5ecc8ed, []int{0}
}
func (m *ToRuneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToRuneRequest.Unmarshal(m, b)
}
func (m *ToRuneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToRuneRequest.Marshal(b, m, deterministic)
}
func (dst *ToRuneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToRuneRequest.Merge(dst, src)
}
func (m *ToRuneRequest) XXX_Size() int {
	return xxx_messageInfo_ToRuneRequest.Size(m)
}
func (m *ToRuneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ToRuneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ToRuneRequest proto.InternalMessageInfo

func (m *ToRuneRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type ToRuneResponse struct {
	InRunes              []uint32          `protobuf:"varint,1,rep,packed,name=in_runes,json=inRunes" json:"in_runes,omitempty"`
	InBytes              []uint32          `protobuf:"varint,2,rep,packed,name=in_bytes,json=inBytes" json:"in_bytes,omitempty"`
	Mapped               map[string]uint32 `protobuf:"bytes,3,rep,name=mapped" json:"mapped,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Bytes                map[string]*Bytes `protobuf:"bytes,4,rep,name=bytes" json:"bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ToRuneResponse) Reset()         { *m = ToRuneResponse{} }
func (m *ToRuneResponse) String() string { return proto.CompactTextString(m) }
func (*ToRuneResponse) ProtoMessage()    {}
func (*ToRuneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_char_vs_rune_c1e4e828d5ecc8ed, []int{1}
}
func (m *ToRuneResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToRuneResponse.Unmarshal(m, b)
}
func (m *ToRuneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToRuneResponse.Marshal(b, m, deterministic)
}
func (dst *ToRuneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToRuneResponse.Merge(dst, src)
}
func (m *ToRuneResponse) XXX_Size() int {
	return xxx_messageInfo_ToRuneResponse.Size(m)
}
func (m *ToRuneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ToRuneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ToRuneResponse proto.InternalMessageInfo

func (m *ToRuneResponse) GetInRunes() []uint32 {
	if m != nil {
		return m.InRunes
	}
	return nil
}

func (m *ToRuneResponse) GetInBytes() []uint32 {
	if m != nil {
		return m.InBytes
	}
	return nil
}

func (m *ToRuneResponse) GetMapped() map[string]uint32 {
	if m != nil {
		return m.Mapped
	}
	return nil
}

func (m *ToRuneResponse) GetBytes() map[string]*Bytes {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type Bytes struct {
	Values               []uint32 `protobuf:"varint,1,rep,packed,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bytes) Reset()         { *m = Bytes{} }
func (m *Bytes) String() string { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()    {}
func (*Bytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_char_vs_rune_c1e4e828d5ecc8ed, []int{2}
}
func (m *Bytes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bytes.Unmarshal(m, b)
}
func (m *Bytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bytes.Marshal(b, m, deterministic)
}
func (dst *Bytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bytes.Merge(dst, src)
}
func (m *Bytes) XXX_Size() int {
	return xxx_messageInfo_Bytes.Size(m)
}
func (m *Bytes) XXX_DiscardUnknown() {
	xxx_messageInfo_Bytes.DiscardUnknown(m)
}

var xxx_messageInfo_Bytes proto.InternalMessageInfo

func (m *Bytes) GetValues() []uint32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type ToCharRequest struct {
	Runes                []uint32 `protobuf:"varint,1,rep,packed,name=runes" json:"runes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToCharRequest) Reset()         { *m = ToCharRequest{} }
func (m *ToCharRequest) String() string { return proto.CompactTextString(m) }
func (*ToCharRequest) ProtoMessage()    {}
func (*ToCharRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_char_vs_rune_c1e4e828d5ecc8ed, []int{3}
}
func (m *ToCharRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToCharRequest.Unmarshal(m, b)
}
func (m *ToCharRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToCharRequest.Marshal(b, m, deterministic)
}
func (dst *ToCharRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToCharRequest.Merge(dst, src)
}
func (m *ToCharRequest) XXX_Size() int {
	return xxx_messageInfo_ToCharRequest.Size(m)
}
func (m *ToCharRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ToCharRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ToCharRequest proto.InternalMessageInfo

func (m *ToCharRequest) GetRunes() []uint32 {
	if m != nil {
		return m.Runes
	}
	return nil
}

type ToCharResponse struct {
	To                   string   `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToCharResponse) Reset()         { *m = ToCharResponse{} }
func (m *ToCharResponse) String() string { return proto.CompactTextString(m) }
func (*ToCharResponse) ProtoMessage()    {}
func (*ToCharResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_char_vs_rune_c1e4e828d5ecc8ed, []int{4}
}
func (m *ToCharResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToCharResponse.Unmarshal(m, b)
}
func (m *ToCharResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToCharResponse.Marshal(b, m, deterministic)
}
func (dst *ToCharResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToCharResponse.Merge(dst, src)
}
func (m *ToCharResponse) XXX_Size() int {
	return xxx_messageInfo_ToCharResponse.Size(m)
}
func (m *ToCharResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ToCharResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ToCharResponse proto.InternalMessageInfo

func (m *ToCharResponse) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func init() {
	proto.RegisterType((*ToRuneRequest)(nil), "char_vs_rune.ToRuneRequest")
	proto.RegisterType((*ToRuneResponse)(nil), "char_vs_rune.ToRuneResponse")
	proto.RegisterMapType((map[string]*Bytes)(nil), "char_vs_rune.ToRuneResponse.BytesEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "char_vs_rune.ToRuneResponse.MappedEntry")
	proto.RegisterType((*Bytes)(nil), "char_vs_rune.Bytes")
	proto.RegisterType((*ToCharRequest)(nil), "char_vs_rune.ToCharRequest")
	proto.RegisterType((*ToCharResponse)(nil), "char_vs_rune.ToCharResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CharVsRuneClient is the client API for CharVsRune service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CharVsRuneClient interface {
	ToRune(ctx context.Context, in *ToRuneRequest, opts ...grpc.CallOption) (*ToRuneResponse, error)
	ToChar(ctx context.Context, in *ToCharRequest, opts ...grpc.CallOption) (*ToCharResponse, error)
}

type charVsRuneClient struct {
	cc *grpc.ClientConn
}

func NewCharVsRuneClient(cc *grpc.ClientConn) CharVsRuneClient {
	return &charVsRuneClient{cc}
}

func (c *charVsRuneClient) ToRune(ctx context.Context, in *ToRuneRequest, opts ...grpc.CallOption) (*ToRuneResponse, error) {
	out := new(ToRuneResponse)
	err := c.cc.Invoke(ctx, "/char_vs_rune.CharVsRune/ToRune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charVsRuneClient) ToChar(ctx context.Context, in *ToCharRequest, opts ...grpc.CallOption) (*ToCharResponse, error) {
	out := new(ToCharResponse)
	err := c.cc.Invoke(ctx, "/char_vs_rune.CharVsRune/ToChar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CharVsRune service

type CharVsRuneServer interface {
	ToRune(context.Context, *ToRuneRequest) (*ToRuneResponse, error)
	ToChar(context.Context, *ToCharRequest) (*ToCharResponse, error)
}

func RegisterCharVsRuneServer(s *grpc.Server, srv CharVsRuneServer) {
	s.RegisterService(&_CharVsRune_serviceDesc, srv)
}

func _CharVsRune_ToRune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToRuneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharVsRuneServer).ToRune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/char_vs_rune.CharVsRune/ToRune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharVsRuneServer).ToRune(ctx, req.(*ToRuneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharVsRune_ToChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharVsRuneServer).ToChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/char_vs_rune.CharVsRune/ToChar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharVsRuneServer).ToChar(ctx, req.(*ToCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CharVsRune_serviceDesc = grpc.ServiceDesc{
	ServiceName: "char_vs_rune.CharVsRune",
	HandlerType: (*CharVsRuneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToRune",
			Handler:    _CharVsRune_ToRune_Handler,
		},
		{
			MethodName: "ToChar",
			Handler:    _CharVsRune_ToChar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "char_vs_rune.proto",
}

func init() { proto.RegisterFile("char_vs_rune.proto", fileDescriptor_char_vs_rune_c1e4e828d5ecc8ed) }

var fileDescriptor_char_vs_rune_c1e4e828d5ecc8ed = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x8b, 0xda, 0x40,
	0x14, 0xc7, 0x4d, 0x62, 0xd2, 0xf6, 0x59, 0xa5, 0x4c, 0xa5, 0xa4, 0xb6, 0xd0, 0x90, 0x52, 0x9a,
	0x1e, 0x4c, 0xc0, 0x5e, 0xda, 0x42, 0x8b, 0x58, 0x3c, 0x7a, 0x09, 0xcb, 0x1e, 0xf6, 0x22, 0x63,
	0x76, 0xd4, 0xa0, 0xc9, 0x64, 0x67, 0x26, 0x82, 0x5f, 0x65, 0xbf, 0xd5, 0x7e, 0xa3, 0x65, 0x66,
	0x12, 0x76, 0x44, 0xf1, 0x36, 0x6f, 0xe6, 0xfd, 0x7f, 0xef, 0x9f, 0xff, 0x0b, 0xa0, 0x6c, 0x8b,
	0xd9, 0xf2, 0xc0, 0x97, 0xac, 0x2e, 0x49, 0x5c, 0x31, 0x2a, 0x28, 0x7a, 0x6b, 0xde, 0x85, 0x5f,
	0xa1, 0x7f, 0x43, 0xd3, 0xba, 0x24, 0x29, 0x79, 0xa8, 0x09, 0x17, 0x08, 0x41, 0x77, 0xcd, 0x68,
	0xe1, 0x5b, 0x81, 0x15, 0xbd, 0x49, 0xd5, 0x39, 0x7c, 0xb2, 0x61, 0xd0, 0x76, 0xf1, 0x8a, 0x96,
	0x9c, 0xa0, 0x8f, 0xf0, 0x3a, 0x2f, 0x15, 0x82, 0xfb, 0x56, 0xe0, 0x44, 0xfd, 0xf4, 0x55, 0x5e,
	0xca, 0x0e, 0xde, 0x3c, 0xad, 0x8e, 0x82, 0x70, 0xdf, 0x6e, 0x9f, 0x66, 0xb2, 0x44, 0x53, 0xf0,
	0x0a, 0x5c, 0x55, 0xe4, 0xde, 0x77, 0x02, 0x27, 0xea, 0x4d, 0xa2, 0xf8, 0xc4, 0xe0, 0xe9, 0x8c,
	0x78, 0xa1, 0x5a, 0xe7, 0xa5, 0x60, 0xc7, 0xb4, 0xd1, 0xa1, 0xbf, 0xe0, 0x6a, 0x72, 0x57, 0x01,
	0xbe, 0x5f, 0x05, 0xa8, 0xa1, 0x5a, 0xaf, 0x55, 0xa3, 0xdf, 0xd0, 0x33, 0xa8, 0xe8, 0x1d, 0x38,
	0x3b, 0x72, 0x6c, 0xbe, 0x55, 0x1e, 0xd1, 0x10, 0xdc, 0x03, 0xde, 0xd7, 0xc4, 0xb7, 0x03, 0x2b,
	0xea, 0xa7, 0xba, 0xf8, 0x63, 0xff, 0xb2, 0x46, 0x0b, 0x80, 0x17, 0xde, 0x05, 0xe5, 0x0f, 0x53,
	0xd9, 0x9b, 0xbc, 0x3f, 0x75, 0xa6, 0xa4, 0x06, 0x2e, 0xfc, 0x02, 0xae, 0xce, 0xe4, 0x03, 0x78,
	0xea, 0xb6, 0xcd, 0xb1, 0xa9, 0xc2, 0x6f, 0x72, 0x33, 0xff, 0xb7, 0x98, 0xb5, 0x9b, 0x19, 0x82,
	0x6b, 0xe6, 0xad, 0x8b, 0x30, 0x90, 0xab, 0xd1, 0x6d, 0xcd, 0x6a, 0x06, 0x60, 0x0b, 0xda, 0x38,
	0xb3, 0x05, 0x9d, 0x3c, 0x5a, 0x00, 0xb2, 0xe1, 0x96, 0xcb, 0x70, 0xd0, 0x1c, 0x3c, 0x1d, 0x13,
	0xfa, 0x74, 0x39, 0x3c, 0x35, 0x6d, 0xf4, 0xf9, 0x5a, 0xb2, 0x61, 0x47, 0x63, 0x24, 0xf6, 0x1c,
	0x63, 0x98, 0x3e, 0xc7, 0x98, 0x56, 0xc3, 0xce, 0x6c, 0x7a, 0xf7, 0x6f, 0x93, 0x8b, 0x6d, 0xbd,
	0x8a, 0x33, 0x5a, 0x24, 0x02, 0x17, 0x98, 0xe1, 0x1d, 0xae, 0xd7, 0x7b, 0xc2, 0x92, 0x0d, 0xab,
	0xb2, 0xb1, 0x94, 0x8f, 0x0f, 0x7c, 0x2c, 0xe5, 0x49, 0xb6, 0xcf, 0x49, 0x29, 0x12, 0xf3, 0x6e,
	0xe5, 0xa9, 0xdf, 0xfa, 0xe7, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x89, 0x46, 0x83, 0xec,
	0x02, 0x00, 0x00,
}
